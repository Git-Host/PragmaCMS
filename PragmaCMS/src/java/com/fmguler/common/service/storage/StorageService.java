/*
 *  Common Services
 *  Copyright 2012 PragmaCraft LLC.
 * 
 *  All rights reserved.
 */
package com.fmguler.common.service.storage;

import com.fmguler.common.service.storage.domain.StorageObject;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

/**
 * Simple Storage Service based on key - data
 * @author Fatih Mehmet GÃ¼ler
 */
public interface StorageService {
    /**
     * Generate a new key to be used for writing/reading.
     * <p>
     * Note that in order to remove unused keys automatically,
     * the generated keys should be stored in a database table,
     * and the referencing table and field names should be specified with setReferencingTables() method.
     * <p>
     * If automatic key deletion is not preferred, set StorageObject.autoRemove=false and remove keys manually with removeKey(); (THIS IS NOT IMPLEMENTED CURRENTLY - YAGNI)
     */
    String generateKey();

    /**
     * Return the inputStream of the content;
     * This inputStream must be closed after the reading process has finished.
     * @throws StorageException if the key is not found or invalid (use generateKey() to generate keys)
     */
    InputStream getInputStream(String key) throws StorageException;

    /**
     * Return the outputStream that can be written to the specified key.
     * This outputStream must be closed after the writing process has finished.
     * <p>
     * While writing to the outputStream, do not call getOutputStream() again.
     * <p>
     * IMPORTANT: Each key can be written only once. Generate a new key, and replace your key reference,
     * if you need to update your data.
     * @throws StorageException if the specified key already exists / write failue
     */
    OutputStream getOutputStream(String key) throws StorageException;

    /**
     * Set the tables which references keys generated by this service.
     * @param referencingTables list of maps including tableName and fieldName keys.
     */
    void setReferencingTables(List referencingTables);

    /**
     * Return the storage object which contains size and hash of the specified key
     * @param key the storage key
     * @return the storage object with size and hash
     */
    StorageObject getStorageObject(String key);
}
